package pl.andrzej.main

class DayFive {

    companion object {

        private val input = listOf(
            "BBFFFBFKLL",
            "FBBBBBFLKL",
            "FBBFBBBLKK",
            "FFBBFFBLLK",
            "FFBBFFFKLL",
            "BBFBBFFLKL",
            "BBFFBBBKLK",
            "BFFBFBFLKL",
            "FBFFFBBKLL",
            "FFFBFBBKLL",
            "BBFBBFFKKK",
            "FBFFBFFKKK",
            "FFBBBFBLLL",
            "BBFBFBFKLL",
            "BBFBFBBLLL",
            "BFFBBBFKLL",
            "BFBBFFBKLK",
            "FFBBFFFLKL",
            "BFBFFBBLLK",
            "BFFFFFBLLL",
            "FBBFFFFLLK",
            "BBFBFBBKLL",
            "BFBBBFBKKK",
            "BFFBBBBKLL",
            "BFBBBFFKKK",
            "FFBFFBBKKK",
            "BFFFBBFLKL",
            "FFBFFFBKKL",
            "FFBFBBFLKK",
            "FFBBBBFLKL",
            "BFFFBFFLLL",
            "FBFBBBFKLK",
            "BFBFBBFKLK",
            "FBBFBFBLKL",
            "BBFFBFBKKK",
            "FBBBFBFKLK",
            "BBFBBBBKLL",
            "FFBBFFBKKL",
            "FBFFFBBLKK",
            "FBFFBBFKKK",
            "FBFBBFFKLL",
            "FBFBBBBKLL",
            "FBBFBFFKKL",
            "BBFBBFFLLL",
            "FBBBFFBLKL",
            "FFBFFBFLKL",
            "BBFBFFBLLK",
            "BBFFBBFKKK",
            "FFBFBFBLLL",
            "FBBBBFBLKK",
            "BFFFBBBLKK",
            "BFFBBFBLLL",
            "FBFFBBFLKK",
            "BFBBBBFLKL",
            "BBFFFFBLLL",
            "BFFFBBBKKK",
            "FBFFFFFLLL",
            "FBFBBFFLKK",
            "FFBFBFBKKL",
            "FBFBBFFLLL",
            "FBFFBFBKLL",
            "FBFFBFBLLK",
            "BFFBFFFLKL",
            "FFFBBBBLKK",
            "BFFFFBBKLL",
            "BFFFFFFKLL",
            "BFBBFFFLLK",
            "BFFFFBFKLL",
            "BFFBFFBKKL",
            "FBBFBBBKKK",
            "FFBBFBFKKK",
            "BBFBBFFLLK",
            "FBFBFBFLKK",
            "BFBFBFBKLK",
            "FBBFFBFKKK",
            "BBFBFFBKLK",
            "BBFBBBFKLK",
            "FFBFBBBKKL",
            "BFBFBBBLLL",
            "FBBBFBFKKL",
            "FFBBFBFKLL",
            "FFBFBBFKLK",
            "FBBFBBFKLL",
            "FFBFBFFLKL",
            "FFBFFFFLLK",
            "FFFBBFBLLL",
            "BBFBBFBLKL",
            "FBBFBBFLKK",
            "FFFBBBBKLL",
            "BBFBFBBLKK",
            "FFFBBFBLKL",
            "FBBFBFFLLK",
            "FFBBFFBLKL",
            "BBFBFFFKLL",
            "FBBBFFFKKL",
            "FBFFBFFLKK",
            "FBBBBBFKKL",
            "BFFFBFBLLL",
            "FBFBBFFLKL",
            "FBBFBBBKKL",
            "BFBBBFBLKL",
            "BFBBFBBKKK",
            "FBBBBBBLKK",
            "FFBFFBBLKL",
            "FBBFFBBKLK",
            "FBBBFBFLLK",
            "BBFFBBFLLK",
            "BBFBBFFKLL",
            "FFBFFBFLLK",
            "FBFBFFBKKL",
            "FFBBBFFKLK",
            "BFBBFFBLLK",
            "BFFBBBBLLK",
            "BBFBFBFLLL",
            "BFFBBFFKKL",
            "FFFBBBFKLK",
            "FFBBBFBKLK",
            "BFBFFBBKLL",
            "FFBFBFBKLL",
            "FBFFFFFLLK",
            "FBBBFBBLKK",
            "FBBBFBBLLL",
            "BFFBBBFKKK",
            "BFBFBFFLLK",
            "FBBBBFBKLK",
            "BFBBFFFKKK",
            "BFBBBFFKKL",
            "FFFBFBFLKL",
            "FBBBBFFKKL",
            "FBBBBBFLKK",
            "BFFFBBFKKK",
            "FBFBFFBLLK",
            "FBFBFBFKLK",
            "FFBBFFFKLK",
            "FBFBBFBLKL",
            "BBFBFFBKKL",
            "FFBFBBFKLL",
            "FBBFFBFLLK",
            "FBBBBFBKKL",
            "BFBBBBBKKL",
            "BBFFFFFLKK",
            "BBFFBBBLKL",
            "BFFFFBBLKK",
            "FBBFBFFLLL",
            "FFFBBFBLLK",
            "FBBBFFBLLL",
            "BFFFBFBKKK",
            "FFBFFFBKLK",
            "BBFFBFFLKK",
            "BBFFBFBKLL",
            "FFBFBBBLKL",
            "FBFBFBBKKK",
            "BFBBFBFLLL",
            "FFFBBBFLKK",
            "BBFFBFBKKL",
            "BFFFFFFLKL",
            "BBFBFBBKKL",
            "BBFBFFFLLK",
            "FBBFFFBKKK",
            "FFBBBBFKKK",
            "FFBBFBBLLL",
            "BFFBFFBKLL",
            "BBFBFFFLKK",
            "FBFBBFBLLK",
            "FFBFBFBKKK",
            "BBFFBFBLLL",
            "FBBBBFFLKL",
            "FBFBFFFLKK",
            "BBFBBFBLKK",
            "BFBBBFBLLL",
            "FBFBFFFKKL",
            "BBFFBBFKLL",
            "BFFFFBFLKK",
            "FBBBFBBKKK",
            "BFFBFBFKLK",
            "FBBFBFBLLK",
            "FFBFFBBLLK",
            "BFFFFBBLLL",
            "FFFBBBFKLL",
            "FBFFFFFKKL",
            "BFFFBBFLKK",
            "BFBFBBBLLK",
            "BBFFBFFKKK",
            "FBFBBBFKKL",
            "FBFBBBBKLK",
            "FBBBBFBLLK",
            "BBFFFFBLKK",
            "BFBFBFBLKK",
            "BFBFBFFLLL",
            "FFBFBFFKLL",
            "FFBFFFFKKK",
            "FBBBBFBLKL",
            "FBBBBBBLKL",
            "BFFBFBBKLK",
            "FFFBFBFLLL",
            "FFBBFBFLKK",
            "BBFFFBBLLL",
            "FBBFBFFKLL",
            "BFBFFBFLKL",
            "FBFBBBBLLL",
            "BFFBBBFLKL",
            "BBFFBBFKLK",
            "FBFBFFFLLK",
            "BFBFFFFKLL",
            "BBFFBFFLKL",
            "BFBFFFFLLK",
            "FFBBBBBKKL",
            "BFFFFFFLLL",
            "BFFBFFBLKK",
            "FFBFFFBLKL",
            "FFBBFBBKLL",
            "FBFBBBFKLL",
            "FBBBFFFKKK",
            "BFFBFFFLLK",
            "FBFBFBFLKL",
            "BBFFBFBKLK",
            "BFBFFBBKKL",
            "BFFBBBBKLK",
            "BFBFBFBLKL",
            "FFBFBFFLLK",
            "FFFBBFBKLL",
            "BFBBFFFKLK",
            "BFBBFFBLKK",
            "FFFBBBBKKL",
            "FBBFBFFKLK",
            "BFBBFBFLKL",
            "FBFBFBFKLL",
            "FBBFFFFKKK",
            "BBFFFBFKLK",
            "FFBBBFBKLL",
            "FFBFBFFKLK",
            "BFFFFFBKKK",
            "FBBBBFBKLL",
            "FBFFBFBLKK",
            "FBBBBBBKKL",
            "FBFBBBFKKK",
            "FFBFBBBKLK",
            "FBBBBBFLLL",
            "BFFBFBFKKK",
            "BFFBFFFLKK",
            "BFFBFFBKKK",
            "BFBFBFBKLL",
            "BBFFBFFKLK",
            "BFFFFBFKKL",
            "FBFFBBFLLL",
            "FBFBFFBKLK",
            "BBFBFFBLLL",
            "BBFBFBBLKL",
            "BBFFBBBLLK",
            "BBFBFFFLKL",
            "FBFFFBFKKK",
            "BBFFBBBKLL",
            "BBFFFBFLKL",
            "FBFFBFBKKL",
            "BFFFFFFKKK",
            "FBFFFFBKLK",
            "BFBBBBBLKL",
            "FBBFFFBLKK",
            "BFFBFBFLLK",
            "FBBFFBFLKK",
            "BFFBBFBKKK",
            "BFBBFFFLKL",
            "FFBBBFBLKL",
            "FFFBFBBLKL",
            "BBFBFFFKKL",
            "FFBFFFFKKL",
            "BFBBBBBKLL",
            "FBBFBFBLLL",
            "FBBFBFFLKL",
            "BFFBBFFKKK",
            "BBFFFBBKKK",
            "BFFFBFBLKL",
            "BFFFFBBKKK",
            "FBBFFFFKLK",
            "BFBFBBBKLK",
            "FBFBFBBKLK",
            "FBBBFBBKLL",
            "FFFBFBBKKL",
            "BFBBBBBKLK",
            "FFBFBBBKKK",
            "BFFFFBFLLL",
            "BFBFBFFKKK",
            "BBFBBBFKKL",
            "FFBFFFBLLK",
            "BFBBBBFKKL",
            "BBFFFBBLKK",
            "FFBFBBBLLL",
            "BFBBBFBKLK",
            "FFBBFFBKKK",
            "BFBFBBFLKK",
            "BFBFFBFKKL",
            "BBFFBFBLKK",
            "BBFBBBBLKK",
            "FFBBBFFKKL",
            "FFFBBFFLKL",
            "FFFBFBFKKK",
            "BBFBBFBKKK",
            "FFFBFBFKKL",
            "BFBBFFBLLL",
            "FBFBFFBLKL",
            "FBBFBFFLKK",
            "BBFBFFBKKK",
            "FBFFBBBKKL",
            "BFFBFFBLKL",
            "FFFBBBFKKL",
            "BFFFBFFLKK",
            "FFBBBBFKKL",
            "FFFBFBBLLK",
            "BBFBFBFKKL",
            "BFBFBFFLKL",
            "FBFBBBFLKL",
            "BFBBBBBLLK",
            "FBFFFFFKLL",
            "BFBFFBFKLK",
            "BBFFBFBLKL",
            "FBFFBFBKKK",
            "BBFFFBFKKL",
            "FBBFFFBLLL",
            "BBFFFFBKLK",
            "BFFBFBBKKL",
            "FBFFFFBLKL",
            "BBFFFFFKLL",
            "BFFBFBBLKL",
            "BBFFFFBLKL",
            "BFFBBBBLKL",
            "FBBFBFBKKL",
            "BFFBFFFLLL",
            "BFBFBBBKKK",
            "FBBBBBBLLL",
            "BFBBBFBKKL",
            "FFBFFBBLLL",
            "FFBBBBBKKK",
            "BBFBBFBKLK",
            "BFBBFFBLKL",
            "FBFBBBBKKL",
            "FFFBFBFLLK",
            "BFFBBBBLLL",
            "BFFFBBFKKL",
            "FBBBFFBKKL",
            "FFBFFBFLKK",
            "FBFBFBBKKL",
            "BBFFFBBLKL",
            "FFBBFFBKLK",
            "BFBFFBBKLK",
            "BFBBFBBLKL",
            "BFBBFFFKLL",
            "BFFFFFBLKK",
            "FFBBBBBLKK",
            "FFFBBBBKKK",
            "BBFBFFFKKK",
            "FBFBBFBKKK",
            "FBBFFFFLKL",
            "FBFFBBBLKK",
            "FBBBBFFKLK",
            "FBBFFFFLKK",
            "FBFFFFBLLK",
            "FFBFBFFKKL",
            "FFBBFFFLLK",
            "BFFFFFFLKK",
            "BBFFFFFKLK",
            "FBFFFFBLLL",
            "FBFBFFBKKK",
            "FBBBBFFLKK",
            "BFBBBBFKLL",
            "BBFBFBFKLK",
            "FFBFBBFKKK",
            "FBFFFBBKLK",
            "FFBFBFBLKL",
            "FBBFFBFKLK",
            "FFBBFBFLKL",
            "FBBBBBBKKK",
            "FFFBBFFKLL",
            "BFFBFBFKKL",
            "FBFFBBBKKK",
            "FBFBFFBKLL",
            "FFBFFFFLLL",
            "FBFFBFFLKL",
            "FFBBBFBLKK",
            "FFFBBFFLKK",
            "BBFFBFFLLK",
            "FBFBBFBLLL",
            "FFBBFBBKKL",
            "BFFBBFFKLL",
            "FFFBFBBKLK",
            "BFFFFFFKKL",
            "FBBBFBFLLL",
            "FFBFBBFKKL",
            "FBFBBFFKKL",
            "BBFBFFFLLL",
            "FBFFBBBLKL",
            "BFBFFFBLLL",
            "BFFBFFBKLK",
            "BFFFBFFKLL",
            "FFBFBBBKLL",
            "FBBFBFBLKK",
            "BBFBBFBKLL",
            "FFBFBFFKKK",
            "BBFFFFBKKL",
            "BFFBBBBLKK",
            "BFBFBFBKKL",
            "BFFBBFBKLL",
            "FBBFFBFKLL",
            "FBFBBFFKLK",
            "BFFBBBFLKK",
            "BFFBBFBLKK",
            "FFBFBFBLKK",
            "FFBBBBFKLL",
            "BFBFFBFLLL",
            "FFFBBFFLLK",
            "BFBFBFBKKK",
            "BFFFBBBKKL",
            "FFFBFFBKKK",
            "FBFBBFBKKL",
            "BBFBFBFKKK",
            "BFFBFBFKLL",
            "FBBBFFFKLK",
            "FBBFFFBKLK",
            "FBFBFBFLLK",
            "BBFFBBFLLL",
            "BFBBBFBKLL",
            "FBFBBBBLKK",
            "FBBFFBBLLL",
            "BFFBBFBKLK",
            "BFFFFFBKLK",
            "FFFBBBBLKL",
            "FFFBBFFKKK",
            "BFFFFFBLKL",
            "FBBBBFFLLK",
            "BFBFFFBKLK",
            "FBFBBFBLKK",
            "FBBBFFFLLK",
            "FBBBFFFLKL",
            "BBFBBFFKLK",
            "BFFBBFBKKL",
            "BFBFBBBKLL",
            "BBFBBFBLLL",
            "BFBBFBFKKK",
            "BBFFFBBKLL",
            "FBBFBFBKLK",
            "FFBBFFBLKK",
            "FBFBBBBLLK",
            "FBFFFBFKLL",
            "FFFBBBBLLK",
            "FBBFFFFKLL",
            "BFFFFBFLLK",
            "BBFBFBFLLK",
            "FBBFFBBKLL",
            "BFBBBBFKKK",
            "FFFBBBFLKL",
            "BFFFBBBLKL",
            "FBBFFBFLKL",
            "BFFBBBFKKL",
            "FFBFFFBKKK",
            "BFBFBBBKKL",
            "FBFBFBBLKL",
            "FFBBFFFLKK",
            "FBBFBFBKLL",
            "BBFBFBBKLK",
            "BFBFFFBKLL",
            "BFBFBBFLKL",
            "BFBBFBBLKK",
            "BFFFBBFKLL",
            "BFFFFFFLLK",
            "FFFBBFBKKK",
            "FFBBFFBKLL",
            "FBFFBFFLLL",
            "BFFFBBBLLK",
            "FBFFBBFKKL",
            "FBBFBBBLLL",
            "FBFBFBBKLL",
            "FBBBFBFLKL",
            "FFBFBBBLLK",
            "FFBBBFBKKK",
            "FFFBBFBLKK",
            "FFBBFFFKKK",
            "BFBBBBFLKK",
            "FFBBBBBKLK",
            "FBFBBFBKLK",
            "FFBBBFFKLL",
            "FBBFBFFKKK",
            "FBFBFBFKKL",
            "FBFFFFFKLK",
            "FBBFFFBKLL",
            "FBBFBBFKKK",
            "BFBBBBBLLL",
            "BFBFBFFKLK",
            "FBFFFBBLKL",
            "BBFFBBFLKK",
            "FFBBFBFLLL",
            "BFFFFBBLLK",
            "FFBBFBBLKL",
            "FBBBFFBLKK",
            "BBFFFBFLKK",
            "FFBFFFFLKL",
            "FBFFBBFKLK",
            "FBBFBBBKLK",
            "FFBFFFFKLK",
            "FBBBBBBKLK",
            "BFFBFFBLLL",
            "FBBBFBFLKK",
            "BFBFFBBKKK",
            "BFFFFFBLLK",
            "BBFFFFBKLL",
            "FBBFFBBKKK",
            "FFFBBFBKLK",
            "BFFBFFFKKK",
            "BBFFBBFKKL",
            "FFBBFBFKLK",
            "BFFFBBBKLK",
            "FFBFFBFKKL",
            "FFBFFBBKKL",
            "BFBFFFFLLL",
            "BFBFFFBLKK",
            "BBFFFBBLLK",
            "BFBFBBBLKK",
            "BFFBBFFLKL",
            "FBFBFFFLKL",
            "BBFFBFFKKL",
            "FBBBBFBLLL",
            "FFFBBBFLLK",
            "BBFBBBBLLL",
            "FFFBBFFKLK",
            "BBFBFBBKKK",
            "FFBBBBFKLK",
            "BFFFBFBKLL",
            "FFFBFBFKLK",
            "BFBBBFFLLK",
            "BFFBBBFLLL",
            "BFFBBBBKKK",
            "FBBBFFFLKK",
            "FFBFBBFLKL",
            "FFBBBBFLLL",
            "FBFFFFBKKL",
            "BFBFFBBLKK",
            "BBFBBFFLKK",
            "BFBBBBFKLK",
            "BFFBFBFLKK",
            "FFBBFBBLKK",
            "BFBFBFFLKK",
            "FFBBBFFLKL",
            "FBFFBFFKLK",
            "FFBBBFBKKL",
            "FBBFFBBLLK",
            "FFBBFBFLLK",
            "FFBFFFFLKK",
            "BFFBBFBLKL",
            "BFBFFBFLLK",
            "BFBFBBBLKL",
            "FFBBFBBKKK",
            "FFBFFBFKLK",
            "FBBBFBBKLK",
            "FFFBBBBLLL",
            "BFFFBFFKLK",
            "FBFFBBFLKL",
            "FBBBBFFKKK",
            "BBFBBBFLLL",
            "BFFFFFBKLL",
            "BFFBFFBLLK",
            "BFFBBFFLLK",
            "BFFBBFBLLK",
            "FBFFFFBKLL",
            "FBBFBBBLKL",
            "BBFFFBBKLK",
            "BBFBFFFKLK",
            "FBFBFBFLLL",
            "FBFFFFFLKK",
            "FBFFBFBLLL",
            "FBBFFFBKKL",
            "FBFFFBFLLK",
            "BFFFFBBKKL",
            "BBFBBBFKKK",
            "BBFFFFFKKL",
            "BFBFFFBLKL",
            "FBBFFBBKKL",
            "FBFFFBFKKL",
            "BFFFBFFLLK",
            "FFBBFFFKKL",
            "FFBFFFBLKK",
            "BFFBFFFKLK",
            "FFFBBFFLLL",
            "BFFFBFBKKL",
            "FFBBBFFKKK",
            "BFBBBFBLLK",
            "BFBBFBFLKK",
            "FBFFFFBLKK",
            "BFFFFBFKKK",
            "BFBFFBFKLL",
            "FBFFFFBKKK",
            "BFBFBBFLLK",
            "BFBBBFFLKL",
            "BFBBFFBKKL",
            "FBFFBBFLLK",
            "BFBFFBFKKK",
            "FFFBFBBLKK",
            "FBBBBBFLLK",
            "FBBFBBFLLL",
            "BFFBFBBKKK",
            "FBFFBFFKLL",
            "BFFBBFFKLK",
            "FFBFBFBLLK",
            "FBFBFFFKKK",
            "FBFFFBBLLL",
            "BFBFFBFLKK",
            "FFBFFBBLKK",
            "FFBFBBFLLK",
            "FFBBBBBLLL",
            "BFFBBBBKKL",
            "FFBBBFFLLK",
            "FFBBBBBLLK",
            "FBBBBBBLLK",
            "FBFBFFBLKK",
            "BFFBBFFLKK",
            "FBBBFFFKLL",
            "BFBFBBFLLL",
            "FBFFFFFLKL",
            "BFBBBFFKLL",
            "FFBBBFFLKK",
            "BBFFBBBLKK",
            "BFBBFBFKLK",
            "BBFFFFFKKK",
            "BBFBFFBLKL",
            "BFFFFBFKLK",
            "FBFFBFFLLK",
            "FFBBBBBKLL",
            "BFFBFFFKLL",
            "BFFBFBFLLL",
            "BFFFBBBLLL",
            "BFBFFFFKKK",
            "BFFFFBBKLK",
            "BFBBBBBLKK",
            "BFBFFFBLLK",
            "BFBBFBBLLL",
            "FFBBFFFLLL",
            "FBBBFBFKLL",
            "FBBFBFBKKK",
            "BFFFBFFKKL",
            "BBFBBFBLLK",
            "FFBFBFFLKK",
            "BBFBBBFLKK",
            "FBBFFBFKKL",
            "BFFFBFFKKK",
            "FFFBFBFLKK",
            "FBBFFFFLLL",
            "FBFFFFFKKK",
            "FBFBFBBLLL",
            "BBFFFBFKKK",
            "BFFBFFFKKL",
            "BFBFBBFKLL",
            "FFBBBFFLLL",
            "BBFFBBBKKK",
            "BFBFFBBLLL",
            "FFBFFBFLLL",
            "FFFBBBFLLL",
            "FBFFBBBLLK",
            "BBFFBFBLLK",
            "FBBBFBBLKL",
            "FFBFFFBKLL",
            "BBFBFBFLKL",
            "BBFBFFBLKK",
            "BBFFFFFLKL",
            "BFBBBBFLLK",
            "FBFFFBFKLK",
            "FBBBBBBKLL",
            "BFFFBFBKLK",
            "BFBBFFBKLL",
            "FFFBFBBLLL",
            "FBFBBBFLLL",
            "FBBBFBBKKL",
            "FBFFFBFLLL",
            "FBBBBBFKLL",
            "BFFFFFFKLK",
            "BFFFBBFLLL",
            "FBBBBFFLLL",
            "FFBFFBFKLL",
            "FBFFBFBKLK",
            "BFBBFBBKKL",
            "BFFBFBBKLL",
            "BFBBFBFKKL",
            "FFBFFBFKKK",
            "BBFBFFBKLL",
            "BFFBBBFKLK",
            "FBBFFFFKKL",
            "FBFBBBFLLK",
            "BBFFBBBKKL",
            "BFBBFFFLKK",
            "BFFBFBBLKK",
            "FFFBBBFKKK",
            "FBBBFFBKLL",
            "BFBBFBFLLK",
            "FFBBFBFKKL",
            "BFBBFBFKLL",
            "BFBBFBBKLL",
            "FFBFFFFKLL",
            "FBFFBFBLKL",
            "FBFBFFFLLL",
            "FBBFBBFKLK",
            "BBFFFBFLLL",
            "FBBBFFBLLK",
            "BFFFBFFLKL",
            "BFFFBFBLKK",
            "BBFBBBBLKL",
            "FBFFFBBKKK",
            "BFFBFBBLLL",
            "BFFFFBBLKL",
            "FBFBBBFLKK",
            "FFFBBFBKKL",
            "BFBBBFFKLK",
            "BBFFFBFLLK",
            "FBBBBBFKKK",
            "BFFFBFBLLK",
            "BFBFBFBLLL",
            "FBBBFFBKKK",
            "FFBBBBFLKK",
            "FBBFBBFKKL",
            "FFBBFBBKLK",
            "BBFBBBFLKL",
            "BBFFFFBLLK",
            "FFBFFBBKLL",
            "BFBFFFFLKK",
            "FBFFFBBLLK",
            "FBBFFFBLKL",
            "FBFBBBBKKK",
            "FFBFFBBKLK",
            "BFBBFBBLLK",
            "FFBBFFBLLL",
            "BBFBFBFLKK",
            "BBFBBBFLLK",
            "FBBBBFFKLL",
            "FFFBBFFKKL",
            "FFFBFBBKKK",
            "BFBFFFFLKL",
            "BFFBFBBLLK",
            "FFFBFBFKLL",
            "FBBBFBFKKK",
            "BBFFFFFLLL",
            "FBBBFBBLLK",
            "FFBBBBBLKL",
            "BBFFBFFKLL",
            "FBBBFFFLLL",
            "FBFFBBBKLL",
            "FBBFFBBLKL",
            "BFBFBFFKLL",
            "FBFBFFFKLK",
            "BBFFFFFLLK",
            "BFFFBBFLLK",
            "FFBFBBFLLL",
            "FBFBBFFKKK",
            "FFBBFBBLLK",
            "BBFBFBBLLK",
            "FFBFBFBKLK",
            "FFBFBFFLLL",
            "FBBFBBFLLK",
            "BFBFBFBLLK",
            "FBBFBBFLKL",
            "BFBFBBFKKK",
            "FBFBFFBLLL",
            "BFBBBFBLKK",
            "BFBFFFBKKK",
            "FBFBFBBLKK",
            "BFBBFFBKKK",
            "FBFFFBFLKL",
            "BFBBBFFLLL",
            "FBFFBFFKKL",
            "BFBFFFFKLK",
            "BFBBBBFLLL",
            "FBBFBBBKLL",
            "BFBBBFFLKK",
            "FBFBFBBLLK",
            "FFFBBBBKLK",
            "BFBFFFBKKL",
            "BFBFBFFKKL",
            "BBFBBBFKLL",
            "FFBFFFBLLL",
            "BFFFBBBKLL",
            "BBFFBBFLKL",
            "BBFBBBBLLK",
            "FFBBBBFLLK",
            "FBFFBBBKLK",
            "FBFFBBBLLL",
            "FBBFFFBLLK",
            "FBBFBBBLLK",
            "BFBBFBBKLK",
            "BBFFBBBLLL",
            "FBFBFBFKKK",
            "BFFFFBFLKL",
            "BBFBBFBKKL",
            "BFBBFFFKKL",
            "BFBFFFFKKL",
            "BFBFFBBLKL",
            "FBBBFFBKLK",
            "FBBBBFBKKK",
            "FFFBFFBKKL",
            "BBFFFBBKKL",
            "BBFFBFFLLL",
            "FBFFFBBKKL",
            "BBFFFFBKKK",
            "BFBFBBFKKL",
            "FBBFFBFLLL",
            "FBFFFBFLKK",
            "FBFBFFFKLL",
            "FBFBBBBLKL",
            "FBBFFBBLKK",
            "BFFFBBFKLK",
            "FBFBBFBKLL",
            "BFFBBFFLLL",
            "BFBBFFFLLL",
            "BFBBBBBKKK",
            "FFBBBFBLLK",
            "BFFFFFBKKL",
            "FFBFBBBLKK",
            "BBFBBFFKKL",
            "FBFBBFFLLK",
            "FBFFBBFKLL",
            "FBBBBBFKLK"
        )

        fun firstPuzzle() {
            val boardingPasses = input.sorted()
            val highestKow = boardingPasses[0].substring(0, 7)
            var highestSeatNumber = 0

            for (boardingPass in boardingPasses) {
                val rowNumberMagic = boardingPass.substring(0, 7)
                val columnNumberMagic = boardingPass.substring(7)

                if (highestKow != rowNumberMagic) {
                    break
                }

                val seatNumber = getSeatNumber(rowNumberMagic, columnNumberMagic)
                if (highestSeatNumber < seatNumber) {
                    highestSeatNumber = seatNumber
                }
            }
            println("Result: $highestSeatNumber")
        }

        private fun getSeatNumber(rowNumberMagic: String, columnNumberMagic: String): Int {
            var rowNumber = 0
            var bottom = 127
            for (char in rowNumberMagic.toCharArray()) {
                if (char == 'B') {
                    rowNumber += (bottom - rowNumber) / 2 + 1
                } else {
                    bottom -= (bottom - rowNumber) / 2 + 1
                }
            }

            var columnNumber = 0
            bottom = 7
            for (char in columnNumberMagic.toCharArray()) {
                if (char == 'K') {
                    columnNumber += (bottom - columnNumber) / 2 + 1
                } else {
                    bottom -= (bottom - columnNumber) / 2 + 1
                }
            }
            val seatNumber = rowNumber * 8 + columnNumber
            return seatNumber
        }

        fun firstPuzzleTest() {
            val exampleSeatNumber = "BBFFFBFKLL"

            //    0 127
            // B 64 127  // top +1
            // B 96 127  // top +1
            // F 96 111  // bottom -1
            // F 96 103  // bottom -1
            // F 96 99   // bottom -1
            // B 98 99   // top +1
            // F 98
            //    0 7
            // K  4 7
            // L  4 5
            // L  4
            // 98 * 8 + 4 = 788

            val seatNumber = getSeatNumber(exampleSeatNumber.substring(0, 7), exampleSeatNumber.substring(7))
            val result = if (seatNumber == 788) "OK" else "ERROR"

            println("Test: $result")
        }

        fun secondPuzzle() {
            val boardingPasses = input.sorted()

            for (i in 0..(boardingPasses.size - 2)) {
                val boardingPass = boardingPasses[i]
                val rowNumberMagic = boardingPass.substring(0, 7)
                val columnNumberMagic = boardingPass.substring(7)
                
                val nextBoardingPass = boardingPasses[i + 1]
                val nextRowNumberMagic = nextBoardingPass.substring(0, 7)
                val nextColumnNumberMagic = nextBoardingPass.substring(7)
                
                val seatNumber = getSeatNumber(rowNumberMagic, columnNumberMagic)
                val nextSeatNumber = getSeatNumber(nextRowNumberMagic, nextColumnNumberMagic)
                
                if (seatNumber - nextSeatNumber == 2) {
                    println("Result: " + (nextSeatNumber + 1))
                    break
                }
            }
        }
    }
}